<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[TODO]]></title>
    <url>%2F2020%2F01%2F03%2FTODO%2F</url>
    <content type="text"><![CDATA[复习过控实验——6日 机器学习论文——13日 毛概展示PPT及论文整合——6日 机器人学大作业(代码、报告)——15日 传感检测复习——20号 嵌入式复习——16号 过控复习——22日 机器人学复习——19日 毛概复习——19日 机器视觉与机器学习复习——17日]]></content>
      <categories>
        <category>TODO</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[8051 Basics]]></title>
    <url>%2F2019%2F01%2F10%2F8051-Basics%2F</url>
    <content type="text"><![CDATA[1 Embedded System Introduction An embedded system is a microcontroller or microprocessor based system which is designed to perform a specific task 1.1 Architecture Von Neumann: data and code lie in the same memory blocks Harvard: data and code lie in different memory blocks 1.2 Instruction Set CISC: Easy to use, higher clock cycle RISC: Hard to use, lower clock cycle 2 8051 Introduction In 1981, Intel introduced an 8-bit microcontroller called the 8051. 128 bytes of RAM 4K byte of on-chip ROM Max 64K at all because PC is 16-bit : (0000 to FFFF address) two timers 4 ports (8-bit wide) 3 internal and 2 external Interrupts Family Member 8052: 8K ROM, 256 byte RAM, 3 Timer 8031: 0K ROM, 128 byte RAM, 2 Timer 2.1 Registers Registers Meaning A(8-bit) accumulator: quick. Used for all operations R(8-bit) R0,R1 to R7: store values temporarily DPTR(16-bit) Data Pointer: access external memory PC(16-bit) Program Counter: where the next instruction to execute can be found in the memory./starts at 0000h SP(8-bit) Stack Pointer: the location of the stack's tail. Initially, the SP register contains value 07 to point to location 08 as the first location being used for the stack by the 8051 PSW(8-bit) program status word:4 conditional flags + RS0、RS1 CY(1-bit) there is a carry out from the D7 bit AC(1-bit) there is a carry from D3 and D4 P(1-bit) odd number of 1's in A register, then P = 1 2.2 Addressing Modes Immediate 1547102397076 Direct 1547102616673 Register Direct 1547103070904 Register Indirect 1547103440872 Indexed 1547116577466 2.3 Hardware Totally 40 pins \(4\times8\) ports \(8\) : Vcc ,GND, XTAL1, XTAL2, EA, ALE, PSEN default: input. 0 written to a port \(\to\) output; 1 written to a port \(\to\) input 2.3.1 Port 0 An open drain: we normally connect P0 to 10K-ohm pull-up resistors to use it as an input or output port be used as both address and data, designated as AD0-AD7 2.3.2 Port 1 Can be used either as input or output It doesn't require pull-up resistors because they are already connected internally 2.3.3 Port 2 Similar to Port 1 It must be used along with P0 to provide the 16-bit address for the external memory. Port 2 is used for upper 8-bit of the 16 bits address 2.3.4 Port 3 Similar to Port 1 P3 Bit Function P3.0 RxD P3.1 &lt; TxD P3.2 &lt; Complement of INT0 P3.3 &lt; INT1 P3.4 &lt; T0 P3.5 &lt; T1 P3.6 &lt; WR P3.7 &lt; Complement of RD 2.3.5 Other RST: Power-On Reset To ensure a valid input of Reset, the high pulse must be high for a minimum of two machine cycles EA: (External Access) Applying a low pulse, it gets activated PSEN: (Program store Enable) Applying a low pulse, it gets activated Single-Bit Instructions SETB 2.4 Timers 8051 has 2 timers, Timer 0 and Timer 1 Both Timer 0 and 1 are 16-bit wide 2 separate 8-bit registers TH0\1 and TL0\1 2.4.1 TMOD 1547123335060 Gate: the timer only runs while INT(0,1) is high. Control the onof the timers Software: SETB TR0 CLR TR0 Hardware: Gate=1 C/T : Counter/Timer select bit. =0: Timers .Be incremented with every machine cycle =1: Counter Mode TF0\1 will be set 1 if Timer has overflowed. 0: 13-bit timer mode (8 bits of TH1 and 5 bits of TL1) 1: 16-bit timer mode 2: 8-bit Auto Reload : Overflow form TL1 set TF1(1) and reload TL1 with TH1 2.5 Interrupts For every interrupt, there must be an interrupt service routine (ISR), or interrupt handler 2.5.1 Process Close currently executing instruction and save the PC in stack Jump to memory location of the interrupt vector table and execute ISR Get PC from stack, execute from that address 2.5.2 Priority We can alter the priority by programming a register called IP (8-bit)(interrupt priority). default: Interrupt Priority Meaning PT1 IP.3 Defines the Timer 1 interrupt priority level. PX1 IP.2 Defines the External Interrupt 1 priority level. PT0 IP.1 Defines the Timer 0 interrupt priority level. PX0 IP.0 Defines the External Interrupt 0 priority level. 2.5.3 Enabling We can enable interrupt by programming a register called IE(8-bit)(interrupt enable). EA - ET2 ES ET1 EX1 ET0 EX0 Global Undefined Timer 2 Serial port Timer 1 External 1 Timer 0 External 0]]></content>
      <categories>
        <category>Embedded System</category>
        <category>8051</category>
      </categories>
      <tags>
        <tag>8051</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Robotics-Final Project Puma560]]></title>
    <url>%2F2019%2F01%2F08%2Frobotics-final-project-puma%2F</url>
    <content type="text"><![CDATA[Please enter the password to read the blog. Incorrect Password! No content to display! ]]></content>
      <categories>
        <category>Robotics</category>
      </categories>
      <tags>
        <tag>robotics</tag>
        <tag>hide</tag>
        <tag>homework</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Math-Lie Algebras]]></title>
    <url>%2F2019%2F01%2F08%2FMath-LieGroup%2F</url>
    <content type="text"><![CDATA[]]></content>
      <categories>
        <category>Math</category>
        <category>Algebra</category>
      </categories>
      <tags>
        <tag>robotics</tag>
        <tag>algebra</tag>
        <tag>math</tag>
        <tag>hide</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linear Algebra for Robotics]]></title>
    <url>%2F2019%2F01%2F08%2FMath-LinearAlgebra%2F</url>
    <content type="text"><![CDATA[Vectors \[ \boldsymbol { v } = \left( v _ { x } , v _ { y } , v _ { z } \right) \] length of a vector p-norm: \(\| v \| _ { p } = \left( \sum _ { i = 1 } ^ { n } \left| v _ { i } \right| ^ { p } \right) ^ { 1 / p }\) Euclidean length: \(p=2\) operation dot product \[ \boldsymbol { a } \cdot \boldsymbol { b } = \boldsymbol { b } \cdot \boldsymbol { a } = \boldsymbol { a } ^ { T } \boldsymbol { b } = \boldsymbol { b } ^ { T } \boldsymbol { a } = \sum _ { i = 1 } ^ { n } a _ { i } b _ { i } = \| a \| _ { 2 } \| b \| _ { 2 } \cos \theta \] cross product \[ \boldsymbol { a } \times \boldsymbol { b } = - \boldsymbol { b } \times \boldsymbol { a } = \operatorname { det } \left( \begin{array} { l l l } { \hat { \boldsymbol { x } } } &amp; { \hat { \boldsymbol { y } } } &amp; { \hat { z } } \\ { a _ { 1 } } &amp; { a _ { 2 } } &amp; { a _ { 3 } } \\ { b _ { 1 } } &amp; { b _ { 1 } } &amp; { b _ { 3 } } \end{array} \right) = [ a ] _ { \mathbf { x } } \boldsymbol { b } = \| a \| _ { 2 } \| b \| _ { 2 } \sin \theta \hat { \boldsymbol { n } } \] Matrices \[ A = \left( \begin{array} { c c c c } { a _ { 1,1 } } &amp; { a _ { 1,2 } } &amp; { \cdots } &amp; { a _ { 1 , n } } \\ { a _ { 2,1 } } &amp; { a _ { 2,2 } } &amp; { \cdots } &amp; { a _ { 2 , n } } \\ { \vdots } &amp; { \vdots } &amp; { \ddots } &amp; { } \\ { a _ { m , 1 } } &amp; { a _ { n , 2 } } &amp; { \cdots } &amp; { a _ { m , n } } \end{array} \right) , A \in \mathbb { R } ^ { m \times n } \] Square Matrices Inverse \(A A ^ { - 1 } = A ^ { - 1 } A = I _ { n \times n }\) symmetric \(A = A ^ { T }\) skew-symmetric \(A = - A ^ { T }\) \[ S = [ v ] _ { \times } = \left( \begin{array} { c c c } { 0 } &amp; { - v _ { z } } &amp; { v _ { y } } \\ { v _ { z } } &amp; { 0 } &amp; { - v _ { x } } \\ { - v _ { y } } &amp; { v _ { x } } &amp; { 0 } \end{array} \right) \] orthogonal: \(A ^ { - 1 } = A ^ { T }\) The product of two orthogonal matrices of the same size is also an orthogonal matrix Group \(O(n)\) deteminant \(=+1 \to SO(n)\) normal: \(A ^ { T } A = A A ^ { T }\) can be diagonalized by an orthogonal matrix All symmetric, skew-symmetric and orthogonal matrices are normal matrices determinant: factor by which the transformation changes changes volumes in an n-dimensional space; equal to the product of the eigenvalues: \(\operatorname { det } ( A ) = \prod _ { i = 1 } ^ { n } \lambda _ { i }\) trace: \(\operatorname { tr } ( A ) = \sum _ { i = 1 } ^ { n } A _ { i i } = \sum _ { i = 1 } ^ { n } \lambda _ { i }\) sum of the diagonal elements sum of the eigenvalues Nonsquare Matrices]]></content>
      <categories>
        <category>Math</category>
        <category>Algebra</category>
      </categories>
      <tags>
        <tag>robotics</tag>
        <tag>algebra</tag>
        <tag>math</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Robotics-Images and Image Processing]]></title>
    <url>%2F2019%2F01%2F07%2FRobotics-Image%2F</url>
    <content type="text"><![CDATA[1 Introduction A process that transforms one or more input images into an output image. Main purpose: enhance an image for human viewing A image is just a matrix. Value: uint8 ,[0-255] (from darkest to brightest) if use complex algorithms, may use floating-point numbers Descibe: width \(\times\) height 2 Useful Algorithms Histogram: the number of times each pixel value occurs. If a picture was under-exposed, the histogram would shift to the left. Find peak in nearby x value: 3 Monadic &amp; Diadic Operations 3.1 Monadic 1546862512496 A function about single pixel. That is \(O [ u , v ] = f ( I [ u , v ] ) , \quad \forall ( u , v ) \in I\) Example: convert a color image to a greyscale image stretch normalize hist 3.2 Diadic Example: chroma-keying: superimpose the image of a person over some background. gamma encoded image to linear tristimulus value. mask = g&lt;0.45 (just a example) mask.*image This an important problem in robot vision. But variation is a significant problem in real-world. Provess image sequence and estimate the background \(\hat { \boldsymbol { B } } \langle k + 1 \rangle \leftarrow \hat { \boldsymbol { B } } \langle k \rangle + c ( \boldsymbol { I } \langle k \rangle - \hat { \boldsymbol { B } } \langle k \rangle )\) \[ c ( x ) = \left\{ \begin{aligned} \sigma , &amp; x &gt; \sigma \\ x , &amp; - \sigma \leq x \leq \sigma \\ - \sigma , &amp; x &lt; - \sigma \end{aligned} \right. \] 1546869040441 4 Spatial Operations Each pixel in the output image is a function of all pixels in a region \[ O [ u , v ] = f ( I [ u + i , v + j ] ) , \quad \forall ( i , j ) \in \mathcal { W } , \quad \forall ( u , v ) \in I \] Spatial operations are powerful for the variety of possible function \(f ( \cdot )\) 4.1 Linear Smoothing ones(K) gaussian \(\mathrm { G } ( u , v ) = \frac { 1 } { 2 \pi \sigma ^ { 2 } } e ^ { - \frac { u ^ { 2 } + v ^ { 2 } } { 2 \sigma ^ { 2 } } }\) 1546870183650 Edge Detection \(p ^ { \prime } [ v ] = p [ v ] - p [ v - 1 ]\) \(p ^ { \prime } [ v ] = \frac { 1 } { 2 } ( p [ v + 1 ] - p [ v - 1 ] )\) Sobel Canny 5 Shape Changing]]></content>
      <categories>
        <category>Robotics</category>
        <category>Robotics,Vison and Control Notes</category>
      </categories>
      <tags>
        <tag>robotics</tag>
        <tag>vision</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Robotics-Vision Foundation]]></title>
    <url>%2F2019%2F01%2F07%2FRootics-Vison%20foundation%2F</url>
    <content type="text"><![CDATA[1 Introduction The light that reaches the eye,or the camera, is a function of the illumination impinging on the scene and the material property known as reflectivity. 2 Light Each color is a single frequency or wavelength of electro-magnetic radiation.We perceive the wavelengths between 400 and 700 nm as different colors. In general, the light we observe can be represented as a function \(E(\lambda)\) ,\(\lambda\) is the wavelength. This is a function about power related to source temperature \(T\) (e.g. 4700K) Planck’s constant \(h\) , Boltzmann’s constant \(k\), speed of light \(c\) …… 1546840747172 2.1 Absorption 1546840861892 Spectrum will be changed (be absorbed) 2.2 Luminance The light refl ected from a surface, its luminance, has a spectrum given by \[ L ( \lambda ) = E ( \lambda ) R ( \lambda ) (W m ^ { - 2 }) \] where \(R\) is the reflectance 2.3 Color How to measure color? Take \(red\) for example: \[ \rho = \int _ { \lambda } L ( \lambda ) M _ { \mathrm { r } } ( \lambda ) \mathrm { d } \lambda \] where \(M _ { r } ( \lambda )\) are the spectral response of the red. 3 Image Formation Here we introduce how images are formed and captured. a glass or plastic lens forms an image on the surface of a semiconductor chip with an array of light-sensitive devices to convert light to a digital image. However, in an eye or in a camera, the depth information is lost. This is known as projection. 3.1 Model 3.1.1 Perspective Camera convex lens \(\frac { 1 } { z _ { 0 } } + \frac { 1 } { z _ { i } } = \frac { 1 } { f }\) In a camera, the image plane (the surface of the sensor chip) is fixed. How to solve the problem? \(\to\) high-quality camera lens is a compound lens comprising multiple glass or plastic lenses. central perspective imaging model 1546843100409 Map: \(\mathrm { P } = ( X , Y , Z ) \to x = f \frac { X } { Z } , y = f \frac { Y } { Z }\) \(\mathcal { P } : \mathbb { R } ^ { 3 } \mapsto \mathbb { R } ^ { 2 }\) straight line \(\to\) straight line map is not unique map is not conformal 3.1.2 Mathematical Model world coordinate homogeneous form \[ \tilde { \boldsymbol { P } } = ( X , Y , Z , 1 ) ^ { T } \] image-plane point coordinate \[ \tilde { \boldsymbol { p } } = \left( \begin{array} { l l l l } { f } &amp; { 0 } &amp; { 0 } &amp; { 0 } \\ { 0 } &amp; { f } &amp; { 0 } &amp; { 0 } \\ { 0 } &amp; { 0 } &amp; { 1 } &amp; { 0 } \end{array} \right) \tilde { \boldsymbol { P } } \] 3.1.3 Discrete Model 1546848482620 Notation: Principle point: \((u_0,v_0)\) width and height of each pixel \(\rho_w , \rho_h\) So, the pixel coordinate \[ u = \frac { x } { \rho _ { w } } + u _ { 0 } , v = \frac { y } { \rho _ { h } } + v _ { 0 } \] finally, we get \[ \tilde { \boldsymbol { p } } = \left( \begin{array} { c c c } { f / \rho _ { w } } &amp; { 0 } &amp; { u _ { 0 } } \\ { 0 } &amp; { f / \rho _ { h } } &amp; { v _ { 0 } } \\ { 0 } &amp; { 0 } &amp; { 1 } \end{array} \right) \left( \begin{array} { c c c c } { 1 } &amp; { 0 } &amp; { 0 } &amp; { 0 } \\ { 0 } &amp; { 1 } &amp; { 0 } &amp; { 0 } \\ { 0 } &amp; { 0 } &amp; { 1 } &amp; { 0 } \end{array} \right) \left( ^ { 0 } T _ { C } \right) ^ { - 1 } \tilde { P } \] In conclusion, we can describe a projection as a function \[ \boldsymbol { p } = \mathcal { P } \left( \boldsymbol { P } , \boldsymbol { K } , \boldsymbol { \xi } _ { \mathrm { C } } \right) \] \(P​\) is point in the real world frame \(K\) is the camera parameter : \(f,\rho_w, \rho_h, u_0, v_0\) \(\xi_c\) the pose of the camera 3.2 Camera Calibration In practice, some parameter in \(K\) is unclear.(\(f, u_0, v_0\)) So we need to calibrate the camera]]></content>
      <categories>
        <category>Robotics</category>
        <category>Robotics,Vison and Control Notes</category>
      </categories>
      <tags>
        <tag>robotics</tag>
        <tag>vision</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Robotics-Arm Kinematics]]></title>
    <url>%2F2019%2F01%2F06%2FRobotics-Arm%20Kinematics%2F</url>
    <content type="text"><![CDATA[1 Introduction Kinematics is the branch of mechanics that studies the motion of a body, without considering it's mass or forces. A robot arm, a serial-link manipulator, a chain of rigid links and joints. Each joint has one degree of freedom. 2 types: Translational—–prismatic joint Rotational—–revolute joint 2 Forward Kinematics 3 Inverse Kinematics 4 Trajectory Requirement: move the end-effector smoothly from pose A to pose B. Approach: joint-space Cartesian motion 4.1 joint-space 4.2 Cartesian motion 5 Advanced Application]]></content>
      <categories>
        <category>Robotics</category>
        <category>Robotics,Vison and Control Notes</category>
      </categories>
      <tags>
        <tag>robotics</tag>
        <tag>Jacobian</tag>
        <tag>Velocity</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Robotics-Final Project]]></title>
    <url>%2F2019%2F01%2F05%2Frobotics-final-project%2F</url>
    <content type="text"><![CDATA[Please enter the password to read the blog. Incorrect Password! No content to display! ]]></content>
      <categories>
        <category>Robotics</category>
      </categories>
      <tags>
        <tag>robotics</tag>
        <tag>hide</tag>
        <tag>homework</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Robotics-Manipulator Velocity]]></title>
    <url>%2F2019%2F01%2F05%2FRobotics-Manipulator%20Velocity%2F</url>
    <content type="text"><![CDATA[1 Introduction End-effector moves with a spatial velocity, and it's a consequnece of all individual joint velocities. Here, we introduce the relationship between joint velocities and end-effector's velocity In kinematics, we care about the pose, now we care about velocity 2 Manipulator Jacobian 2.1 Overview Jocabian: \[ J = \frac { \partial f } { \partial x } = \left( \begin{array} { c c c } { \frac { \partial y _ { 1 } } { \partial x _ { 1 } } } &amp; { \cdots } &amp; { \frac { \partial y _ { 1 } } { \partial x _ { n } } } \\ { \vdots } &amp; { \ddots } &amp; { \vdots } \\ { \frac { \partial y _ { m } } { \partial x _ { 1 } } } &amp; { \cdots } &amp; { \frac { \partial y _ { m } } { \partial x _ { n } } } \end{array} \right) \] In manipulator, \(f\) (end-effector pose) and \(x\) (joint variables) are all vector: \[ \frac { \mathrm { d } p } { \mathrm { d } q } = \mathrm { J } ( q ) \to \mathrm { d } \boldsymbol { p } = \boldsymbol { J } ( \boldsymbol { q } ) \mathrm { d } \boldsymbol { q } \] and divide through by \(dt\) \[ \begin{aligned} \frac { \mathrm { d } p } { \mathrm { d } t } &amp; = J ( q ) \frac { \mathrm { d } q } { \mathrm { d } t } \to \dot { p } = J ( q ) \dot { q } \end{aligned} \] Jocabian is a $J R^{6N} $ (\(6\) for enviroment, \(N\) for n joints) matrix 2.2 Under- and Over-Actuated Manipulators Under-Actuated: accepting that some Cartesian degrees of freedom are not controllable Over-Actuated: multiple solution, so find a least-squares solution 3 Jocabian: Numerical Properties \[ \dot{p}=J ( q ) \dot { q }\\ \dot { q } = J ( q ) ^ { - 1 } \nu \] 3.1 Singularities Singularities occur when the robot is at maximum reach or when one or more axes become aligned resulting in the loss of degrees of freedom. aka \(det(J(q))=0\) If robot is close to a singularity, some end-effector velocities require very high joint rates 3.2 Manipulability 4 Inverse Jocabian: generate paths 4.1 Resolved-Rate Motion Control Resolved-rate motion control is a simple and elegant algorithm to generate straight line motion It make use of \(\dot { \boldsymbol { q } } = J ( \boldsymbol { q } ) ^ { - 1 } \boldsymbol { \nu }\) to map resovle desired Cartesian velocity to joint velocity Control scheme: first \(\dot { \boldsymbol { q } } ^ { * } \langle k \rangle = J ( \boldsymbol { q } \langle k \rangle ) ^ { - 1 } \nu ^ { * }\) computes the required joint velocity as a function of the manipulator and disired end-effector velocity \(\nu ^ { * }\) then \(q ^ { * } \langle k + 1 \rangle \leftarrow \boldsymbol { q } \langle k \rangle + \delta _ { t } \dot { \boldsymbol { q } } ^ { * } \langle k \rangle\) perform intergration to give desired joint angle for next step. 5 Jocabian: Transform Force from End to Joint 6 Jocabian: Inverse Kinematics If a robot don't meet some specification: have 6 joints have a spherical wrist Then, it's hard to give a explicit solution. So we introduce general numerical solution based on: forward kinematics the Jacobian transpose Idea: compute by error Notation: actual pose \(\xi _ { E } = \mathcal { X } ( q )\) , desired pose \(\xi _ { E } ^ { * }\) , error between them:\(\xi _ { \Delta }\) (also can be described by a spatial displacement) \[ ^ { E } \Delta = \Delta \left( \xi _ { E } , \xi _ { E } ^ { * } \right) = ( t , \hat { v } \theta ) \in \mathbb { R } ^ { 6 } \] How to compute? imagine a spring between two pose, which is pulling and twisting (wrench) the end-effector proportional to the spatial displacement \(\to ^ { E } \boldsymbol { W } = \gamma ^ { E } \boldsymbol { \Delta }\) the wrench is resolved to generalized joint forces \(\to\boldsymbol { Q } = _{}^{E}\textrm{} \boldsymbol { J } ( \boldsymbol { q } ) ^ { T } \boldsymbol { W }\) assume joint velocity just be proportional to the forces \(\to \dot { q } = Q / B (a \ coefficient)\) wrap up: \(\dot { \boldsymbol { q } } = \frac { 1 } { B } \boldsymbol { J } ( \boldsymbol { q } ) ^ { T } \Delta \left( \mathcal { K } ( \boldsymbol { q } ) , \xi _ { E } ^ { * } \right)\) we can solve it interatively by: \[ \begin{aligned} \delta _ { q } \langle k \rangle = \alpha J ( \boldsymbol { q } \langle k \rangle ) ^ { T } \Delta \left( \mathcal { K } ( \boldsymbol { q } \langle k \rangle ) , \xi _ { E } ^ { * } \right )\\ \boldsymbol { q } \langle k + 1 \rangle \leftarrow \boldsymbol { q } \langle k \rangle + \delta _ { q } \langle k \rangle \end{aligned} \] until the norm of the update \(\left\| \delta _ { q } \langle k \rangle \right\|\) is sufficiently pratically above algorithm is slow and sensitive to \(\alpha\) ,so we imporve it by: formulate this as a least-squares problem: \(\to E = \boldsymbol { \Delta } ^ { T } M \Delta\) we want to minimize the scalar cost where \(M = \operatorname { diag } ( m ) \in \mathbb { R } ^ { 6 \times 6 }\) and \(m\) is the mask vector update becomes :\(\delta _ { q } \langle k \rangle = \left( J ( \boldsymbol { q } \langle k \rangle ) ^ { T } \boldsymbol { M } \boldsymbol { J } ( \boldsymbol { q } \langle k \rangle ) \right) ^ { - 1 } \boldsymbol { J } ( \boldsymbol { q } \langle k ) ) ^ { T } \boldsymbol { M } \Delta \left( \mathcal { X } ( \boldsymbol { q } \langle k \rangle ) , \xi _ { E } ^ { * } \right)\) impove above performance near singularities by introducing a damping constant λ: \[ \delta _ { q } \langle k \rangle = \left( J ( \boldsymbol { q } \langle k \rangle ) ^ { T } \boldsymbol { M } \boldsymbol { J } ( \boldsymbol { q } \langle k \rangle ) +\lambda I_{N\times N}\right) ^ { - 1 } \boldsymbol { J } ( \boldsymbol { q } \langle k ) ) ^ { T } \boldsymbol { M } \Delta \left( \mathcal { X } ( \boldsymbol { q } \langle k \rangle ) , \xi _ { E } ^ { * } \right) \] An effective way to choose \(\lambda\) is to test whether or not an iteration reduces the error]]></content>
      <categories>
        <category>Robotics</category>
        <category>Robotics,Vison and Control Notes</category>
      </categories>
      <tags>
        <tag>robotics</tag>
        <tag>Jacobian</tag>
        <tag>Velocity</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PADS-Queues]]></title>
    <url>%2F2019%2F01%2F03%2FADS-Queues%2F</url>
    <content type="text"><![CDATA[1 Introduction 1.1 Queues A queue is an ordered collection of items where the addition of new items happens at one end, called the “rear,” and the removal of existing items occurs at the other end, commonly called the “front.” Example: wait in a line for a movie/ OS use queues control processes Usage: keep in order 1546447640606 1.2 ADT Queue Operation Queue Contents Return Value q.is_empty() [] True q.enqueue(4) [4] q.enqueue('dog') ['dog', 4] q.enqueue(True) [True, 'dog', 4] q.size() [True, 'dog', 4] 3 q.is_empty() [True, 'dog', 4] False q.enqueue(8.4) [8.4, True, 'dog', 4] q.dequeue() [8.4, True, 'dog'] 4 q.dequeue() [8.4, True] 'dog' q.size() [8.4, True] 2 2 A Queue Implementation In practice, use the standard library's collections.deque to achieve high performance( \(O(1)\)) enqueues and dequeues.]]></content>
      <categories>
        <category>CS</category>
        <category>DS &amp; Algorithm</category>
      </categories>
      <tags>
        <tag>DS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Robotics-Force Control]]></title>
    <url>%2F2019%2F01%2F01%2FRobotics-Force%2F</url>
    <content type="text"><![CDATA[1 Introduction Mere position control is not suffice is contact is made between end-effector and environment. So introduce hybrid position/force controller to solve the problem. This method is one formalism through which industrial robots might someday be controlled in order to perform tasks requiring force control. 2 Application of Robots to Assembly Tasks Spot welding Spray painting Pick and place operations Future: assembly-line tasks, force is extremely important. Currently, the dexterity of manipulators remains quite low and limit their appplication in the automated assembly area. If we can measure and control contact forces generated at the hand, we can imporove the performance without using bigger, heavier, and more expensive manipulator. Basic Idea Every manipulation task can be broken down into subtasks that are defined by a particular contact situation occurring between the manipulator end-effector (or tool) and the work environment. With each subtask, we can associate a set of constrains mechanical geometric]]></content>
      <categories>
        <category>Robotics</category>
        <category>Introduction to Robotics Notes</category>
      </categories>
      <tags>
        <tag>control</tag>
        <tag>robotics</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Robotics-Nonlinear Control]]></title>
    <url>%2F2019%2F01%2F01%2FRobotics-Nonlinear%2F</url>
    <content type="text"><![CDATA[1 Introduction In linear control, we modeled the manipulator by \(n\) independent second-order differential equations. In this chapter, we will base our controller design on the \(n \times 1\) vector differential equation 2 Nonlinear local linearization When nonlinearities are not severe, local linearization can be used in the neighborhood of an operating point. But, manipulator move among regions so widely separated that no linearization valid for all regions can be found. moving linearization move the operating point with the manipulator as it moves, always linearizing about the desired position of the manipulator deal with the nonlinear directly the poles of the system will &quot;move&quot;, so we can not select fixed gains. Instead, the gains are also time-varying so it will keep the system critically damped Example: nonlinear spring open loop equation: \(m \ddot { x } + b \dot { x } + q x ^ { 3 } = f\) servo portion: \(f ^ { \prime } = \ddot { x } _ { d } + k _ { v } \dot { e } + k _ { p } e\) model-based portion: changed ​ \(\begin{array} { l } { \alpha = m } \\ { \beta = b \dot { x } + q x ^ { 3 } } \end{array}\) ##3 Control problem for Manipulators For manipulator, the model is complicated \[ \tau = M ( \Theta ) \ddot { \Theta } + V ( \Theta , \dot { \Theta } ) + G ( \Theta ) \] where $$ is the position of all the joints. If we add friction to the model, we get \[ \tau = M ( \Theta ) \ddot { \Theta } + V ( \Theta , \dot { \Theta } ) + G ( \Theta ) + F ( \Theta , \dot { \Theta } ) \] where we can use our partitioned controller again: \[ \tau = \alpha \tau ^ { \prime } + \beta \] and we choose \[ \begin{aligned} \alpha &amp; = M ( \Theta ) \\ \beta &amp; = V ( \Theta , \dot { \Theta } ) + G ( \Theta ) + F ( \Theta , \dot { \Theta } ) \end{aligned} \] servo law: \(\tau ^ { \prime } = \ddot { \Theta } _ { d } + K _ { v } \dot { E } + K _ { p } E\) where \(E = \Theta _ { d } - \Theta\) finally we get \[ \ddot { E } + K _ { v } \dot { E } + K _ { p } E = 0 \] This solve the problem in theory, but not in practice because computer do it by discrete nature inaccuracy in manipulator model 4 Current industrial-robot Control System Parameters may be inaccurate. So model-based control law maybe doesn't make sense For economic reasons, error driven is more usual. individual-joint PID control average gain are chosen \(\tau ^ { \prime } = \ddot { \Theta } _ { d } + K _ { v } \dot { E } + K _ { p } E + K _ { i } \int Edt\) 5 Lyapunov Stability Analysis A analytically way to evluate stability but not the performance.]]></content>
      <categories>
        <category>Robotics</category>
        <category>Introduction to Robotics Notes</category>
      </categories>
      <tags>
        <tag>control</tag>
        <tag>robotics</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Notes about Dropout]]></title>
    <url>%2F2018%2F12%2F30%2FDropout%2F</url>
    <content type="text"><![CDATA[Abstract 深度神经网络有很多参数因而威力巨大。但是过大的神经网络使得过拟合成为了一个非常严重的问题。Dropout是解决这个问题的一个方法。其主要思想是在训练过程中随机舍弃一些单元，而验证这种方法效果的方式也很简单：通过和不经过Dropout，而大小与经过Dropout的模型相近的神经网络模型进行对比。通过实验，这种方法能够很好地防止过拟合，并且和目前的一些正则化方法相比有了明显的提升。 Introduction 深度神经网络包含了许多非线性隐藏层，这使得深度神经网络变得有很强的表达性，也就是说其可以学习输入和输出之间的复杂的关系。 但是当训练数据有限的时候，可能部分关系是从采样噪声学到的，这些关系在训练集中存在但在实际的测试数据中不存在。这就导致了过拟合。 减少过拟合的方法包括，验证集上的性能开始下降时尽快停止训练，为权重引入L1/L2正则惩罚项。 如果计算量上不受限制，按照bayesian的黄金准则，regularize 一个固定规模的模型的最好的方式是，在参数的所有可能的取值上做预测，再根据每种取值的后验概率对这些预测加权取平均。实际中希望用更少的计算量近似到达bayesian的性能。 本文提出dropout，学习指数个共享参数的模型，做预测，求几何平均。近似地有效地组合了指数多个神经网络体系结构。 Dropout做法，暂时地随机地移除网络中的单元（及其输入和输出连接）。比如，每个单元都以固定的概率\(p\)（比如=0.5）保留。（但是输入单元的保留概率应该接近1），相当于从原网络中采样一个thinned稀疏的网络。 原网络有\(n\)个单元，则有\(2^n\)种可能（每个节点有移除/保留2种可能,各节点独立）的稀疏网络。 dropout_compare 在测试的时候，直接地先对每个网络做预测再平均 计算量大不可行。采用近似平均方法，将\(2^n\)个网络组合成一个神经网络（所有单元都保留，但单元的输出权重都乘以该单元在训练时候的保留概率），基于这个神经网络做预测。 Motivation Dropout的动机来自于关于性别在进化中的作用的理论。有性生殖包括从一个亲本和另一个亲本中提取一半的基因，加入非常少量的随机突变，并将它们结合产生受精卵。无性繁殖是通过父母基因的拷贝中加入微小突变来创造后代。无性繁殖应该是一种更好的方法来优化个体的健康，这似乎是合理的，因为一组良好的基因组合在一起可以直接传递给后代。另一方面，有性生殖很可能会破坏这些共同适应的基因，特别是如果这些基因的数量很大，而且直觉上，这应该会降低已经进化出复杂的共同适应的生物体的适应性。然而，有性繁殖是最先进的生物进化的方式。 对有性生殖优势的一种可能解释是，从长期来看，自然选择的标准可能不是个体特性，而是基因的混合能力。就是说那些能够和更多随机的基因协作的基因才是更加健壮的。因此一些基因必须要自己学会做一些事而不只是跟很多其他基因合作，这种合作会减少个体适应性。类似地，随机的选择dropout可以增加隐层神经元的健壮性。 有个密切相关但却略有不同的例子，十个阴谋，每个五人参与和一个大阴谋五十人参与相比，显然前者获得一次成功概率较大。一个复杂的共同协作的网络在训练集表现会很出色，但到测试集中，出现了很多新的数据，他就不如很多个更为简单的协作神经元工作的效果好。 Model Description 考虑一个有着\(L\)层隐藏层的神经网络，让\(l \in \{1,....,L \}\) 表示隐藏层的层数，让\(z^{(l)}\) 表示输入到第\(l\)c层神经网络的向量，\(y^{(l)}\) 表示第\(l\)层神经网络的输出，\(W^{(l)}\)表示第\(l\)层神经网络的权重，\(b^{(l)}\)表示第\(l\)层神经网络的bias \[ \begin{aligned} z _ { i } ^ { ( l + 1 ) } &amp; = \mathbf { w } _ { i } ^ { ( l + 1 ) } \mathbf { y } ^ { l } + b _ { i } ^ { ( l + 1 ) } \\ y _ { i } ^ { ( l + 1 ) } &amp; = f \left( z _ { i } ^ { ( l + 1 ) } \right) \end{aligned} \] 左图：普通神经网络。右图：dropout之后的神经网络 \[ \begin{aligned} r _ { j } ^ { ( l ) } &amp; \sim \text { Bernoulli } ( p ) \\ \widetilde { \mathbf { y } } ^ { ( l ) } &amp; = \mathbf { r } ^ { ( l ) } * \mathbf { y } ^ { ( l ) } , \\ z _ { i } ^ { ( l + 1 ) } &amp; = \mathbf { w } _ { i } ^ { ( l + 1 ) } \widetilde { \mathbf { y } } ^ { l } + b _ { i } ^ { ( l + 1 ) } \\ y _ { i } ^ { ( l + 1 ) } &amp; = f \left( z _ { i } ^ { ( l + 1 ) } \right) \end{aligned} \] Conclusion Dropout是一种可以在神经网络中减小过拟合程度的一种方法。普通的反向传播算法只能在学习到训练集中的知识但是泛化性能不够。而随机的Dropout使得每一个隐藏层的单元都不一定会在输出中起到作用，因此能够提升神经网络在各个领域内的使用性能。 Dropout的一个缺点是它使得训练的时间延长了，通常来说，一个使用Dropout来训练的神经网络会比拥有相同结构的普通神经网络耗费2-3倍的时间，这主要是因为变量的更新较为缓慢，每一次更新都是几乎不相同的结构。当然有得必有失，在机器学习的领域中，要想获得一方面的进步，就要在其他方面做出让步。Dropout方法增加了算法的训练时间，降低了模型的过拟合风险。]]></content>
      <categories>
        <category>CS</category>
        <category>paper</category>
      </categories>
      <tags>
        <tag>paper</tag>
        <tag>notes</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Robotics-Linear Control]]></title>
    <url>%2F2018%2F12%2F27%2FRobotics-Linear%20Control%2F</url>
    <content type="text"><![CDATA[1 Introduction Premise: Know the means to calculate joint-position correspond to desired end-effector motions. Problem: Howto casuse the manipulator acually to perform these desired motions. Solution 1: Linear control system. In fact, non-linear is more usual, linear control is just a approximate methods It's resonable to make such approximation, so lineat control methods are the ones most often used in industrial practice. Learn linear first is good for later study 2 Control-Law Partitioning Partitioning Method (2 parts): model-based portion: make use of supposed knowledge of m,b,k, to make the system appear as a unit mass\(\to\) servo portion simple. servo portion: make use of feedback to modify the behavior of the system A open-loop equation of motion for the system: \[ m \ddot { x } + b \dot { x } + k x = f \] The model-based portion of the control: \[ f = \alpha f ^ { \prime } + \beta \] and we choose(because we want to make the ) \[ \begin{array} { l } { \alpha = m } \\ { \beta = b \dot { x } + k x } \end{array} \] finally we get \(\ddot { x } = f ^ { \prime }\) Graphiclly,we transform a system like this 1545907095978 into a system easier 1545907198498 What we need to do is design a control law to compute \(f ^ { \prime } = - k _ { v } \dot { x } - k _ { p } x\) so it yields \[ \ddot { x } + k _ { v } \dot { x } + k _ { p } x = 0 \] Conclusion get the system‘s parameters find \(\alpha ,\beta\) calculate \(k_v,k_p\) depend on the requirement 3. Trajectory-Following Control Know: trajectory, a funciton of time \(x_d(t)\) and we can get $x_d, x_d $as well Define: \(e=x_d-x\) Design \(f ^ { \prime } = \ddot { x } _ { d } + k _ { v } \dot { e } + k _ { p } e\) Get: \(\ddot { x } = \ddot { x } _ { d } + k _ { v } \dot { e } + k _ { p } e\) So, we can choose coefficients and design any response we want]]></content>
      <categories>
        <category>Robotics</category>
        <category>Introduction to Robotics Notes</category>
      </categories>
      <tags>
        <tag>control</tag>
        <tag>robotics</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[STM32-ADC]]></title>
    <url>%2F2018%2F12%2F27%2FSTM32-ADC%2F</url>
    <content type="text"><![CDATA[1 Introduction STM32 have one of the most advanced ADCs on microcontroller market. This note provide users to understand some modes offered in STM32 2 Independent Mode Single Channel, single conversion Example: Check if the battery voltage is succulent or not 1545842732972 Multichannel, single conversion Example: Can be used when starting system depends on some parameters Single Channel, continuous conversion Example: Run in background, so can be used as a monitor to check something all the time 1545842717710 Injected conversion Intended for use when conversion is triggered by an external event or by software. 1545843010338 3 Example Code 1234567891011121314151617181920212223242526272829303132333435363738394041void GPIOINIT_ADC()&#123; GPIO_InitTypeDef GPIO_InitStructure; GPIO_InitStructure.GPIO_Pin=GPIO_Pin_0;//ADC GPIO_InitStructure.GPIO_Mode=GPIO_Mode_AIN; //模拟输入 GPIO_InitStructure.GPIO_Speed=GPIO_Speed_50MHz; GPIO_Init(GPIOB,&amp;GPIO_InitStructure);&#125;void RCCINIT_ADC()&#123; SystemInit(); RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB,ENABLE); RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO,ENABLE); RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1,ENABLE); RCC_ADCCLKConfig(RCC_PCLK2_Div6);//12M 最大14M 设置ADC时钟（ADCCLK）&#125;void ADCINIT_ADC()&#123; ADC_InitTypeDef ADC_InitStructure; ADC_InitStructure.ADC_Mode = ADC_Mode_Independent; ADC_InitStructure.ADC_ScanConvMode = DISABLE; ADC_InitStructure.ADC_ContinuousConvMode = DISABLE; ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_None; ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right; ADC_InitStructure.ADC_NbrOfChannel = 1; ADC_Init(ADC1, &amp;ADC_InitStructure); ADC_TempSensorVrefintCmd(ENABLE); ADC_Cmd(ADC1,ENABLE); ADC_ResetCalibration(ADC1);//重置指定的ADC的校准寄存器 while(ADC_GetResetCalibrationStatus(ADC1));//获取ADC重置校准寄存器的状态 ADC_StartCalibration(ADC1);//开始指定ADC的校准状态 while(ADC_GetCalibrationStatus(ADC1));//获取指定ADC的校准程序 ADC_RegularChannelConfig(ADC1,ADC_Channel_8,1,ADC_SampleTime_239Cycles5);//设置指定ADC的规则组通道，设置它们的转化顺序和采样时间 ADC_SoftwareStartConvCmd(ADC1, ENABLE);//使能或者失能指定的ADC的软件转换启动功能 while(ADC_GetFlagStatus(ADC1, ADC_FLAG_EOC) == RESET);&#125;]]></content>
      <categories>
        <category>Embedded System</category>
        <category>STM32</category>
      </categories>
      <tags>
        <tag>STM32</tag>
        <tag>ADC</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Robotics-Trajectory]]></title>
    <url>%2F2018%2F12%2F25%2FRobotics-Trajectory%2F</url>
    <content type="text"><![CDATA[1 Introduction trajectory refers to a time history of position, velocity, and acceleration for each degree of freedom. Concern: Easy description：just desired goal position and orientation How to generating and representing in computer 2 General consideration Huamn-interface. Consider tool frame \(\{T\}\) , in which a user would think and design path. Path include many intermediate points (position and orientation) Want a smooth path, first derivative even second derivative. jerky motions tend to cause increased wear on the mechanism andcause vibrations by exciting resonances in the manipulator 3 Joint-Space Schemes First get the via points and then convert it to a set of joint angle by inverse kinematics Joint space schemes is the easiest to compute. 3.1 Cubic Polynomials Some constrains: \(θ(0) = θ_0\) initial \(θ(t_f ) = θ_f\) final \(\dotθ(0) = 0\) continuous in velocity \(\dotθ(t_f ) = 0\) continuous in velocity apply \[ θ(t) = a_0 + a_1t + a_2t^2 + a_3t^3solve the problem \] to solve the problem (between two points) 3.2 Cubic polynomials for a path with via points What if we wish to specfify the intermediate via points? (between many points) constrains becoms \(θ(0) = θ_0\) initial \(θ(t_f ) = θ_f\) final \(\dotθ(0) = \dot\theta_0\) continuous in velocity \(\dotθ(t_f ) = \dot\theta_f\) continuous in velocity But how we choose the intermediate velocity? There are some method: Specified by user Choose by computer 1545739505404 If the slope of lines change sign at via point \(\to\)zero velocity if the slope of lines does not change sign\(\to\)average velocity 3.3 Linear function with parabolic blends 1545741027528 \[ \ddotθ\times t_b =\frac{θ_h − θ_b}{t_h − t_b} \] \[ θ_b = θ_0 + \frac12\ddotθ\times t_b^2 \] There are 2 equations and 6 variabels So, given \(\theta_f ,\theta_0, t_h\), choose \(\ddot\theta\to\)we can calculate \(t_b\) 3.4 Linear function with parabolic blends for a path with via points Consider there an arbitrary number of via points 1545744520459 4 Cartesian-Space Schemes In Joint-Space, the spatial shape of path taken by the end-effector will be complicated In Cartesian-Space, we can also specify shape of the path. Line However, Cartesian schemes are more computationally expensive because inverse kinematics must be solved at real time 5 Geometric Problems with Cartesian Paths Intermediate points unreachable 1545745680365 High joint rates near singularity 1545745696711 Start and goal reachable in different solutions 1545745805058]]></content>
      <categories>
        <category>Robotics</category>
        <category>Introduction to Robotics Notes</category>
      </categories>
      <tags>
        <tag>robotics</tag>
        <tag>trajectory</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PADS-Analysis]]></title>
    <url>%2F2018%2F12%2F24%2FADS-Analysis%2F</url>
    <content type="text"><![CDATA[1. Big Picture What makes a program better？many valid criteria, which are often in conflict. omputer scientists love Time Memory trade off sum of 1-n： simple add gauss formula 2. Big O Notation f(n) Name 1 Constant \(log n\) Logarithmic \(n\) Linear \(nlogn\) Log Linear \(n^2\) Quadratic \(n^3\) Cubic \(2^n\) Exponential 3. Example :Anagram Detection Checking off: check one by one ,\(O(n^2)\). Sort and Compare: \(O(nlogn)\) Brute Force , try all possibilities: \(O(n!)\) Count and Compare: \(O(n)\) 4. Performance of Python Types Lists Indexing &amp; Assigning &amp; Appending \(O(1)\) Poping, Shifting &amp; Deleting, normally \(O(n)\) ,beacuse has to shift changed element Reversing \(O(n)\) Dictionaries “getting” and “setting” : \(O(1)\) Iterating &amp; Copying: \(O(n)\)]]></content>
      <categories>
        <category>CS</category>
        <category>DS &amp; Algorithm</category>
      </categories>
      <tags>
        <tag>DS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PADS-Stacks]]></title>
    <url>%2F2018%2F12%2F24%2FADS-Stacks%2F</url>
    <content type="text"><![CDATA[1. Introduction to Stacks Stacks is a kind of linear data structures. What distinguishes one linear structure from another is where additions and removals may occur 1.1 Stacks A stack is an ordered collection of items where the addition of new items and the removal of existing items always takes place at the same end. Example: stack of books, URL back button Usage: reverse the order 1545630479398 1.2 ADT ADT data represents DS physical implementation of an ADT Stack operation Stack contents Return value s.is_empty() [] True s.push(4) [4] s.push('dog') [4, 'dog'] s.peek() [4, 'dog'] 'dog' s.push(True) [4, 'dog', True] s.size() [4, 'dog', True] 3 s.is_empty() [4, 'dog', True] False s.push(8.4) [4, 'dog', True, 8.4] s.pop() [4, 'dog', True] 8.4 s.pop() [4, 'dog'] True s.size() [4, 'dog'] 2 2. A Stack Implementation In practice , “use a Python list as a stack” even though the implementations are logically equivalent, they would have very different timings when performing benchmark testing. Here, just use python list with limit function. 3. Example:Balanced Parentheses parentheses are used to order the performance of operations \[ (5+6)×(7+8)/(4+3) \] or lisp function 12(defun square(n) (* n n)) So,it's important to differentiate between parentheses that are correctly balanced and those that are unbalanced in strucures. Why Stack ? open match close close match open, reverse order So a stack, push if open, pop if close. Finally, if len(stack)==0, balance. 123456789101112131415161718192021222324252627PAIRINGS = &#123; '(': ')', '&#123;': '&#125;', '[': ']'&#125;def is_balanced(symbols): stack = [] for s in symbols: if s in PAIRINGS.keys(): stack.append(s) continue try: expected_opening_symbol = stack.pop() except IndexError: # too many closing symbols return False if s != PAIRINGS[expected_opening_symbol]: # mismatch return False return len(stack) == 0 # false if too many opening symbolsis_balanced('&#123;&#123;([][])&#125;()&#125;') # =&gt; Trueis_balanced('&#123;[])') # =&gt; Falseis_balanced('((()))') # =&gt; Trueis_balanced('(()') # =&gt; Falseis_balanced('())') # =&gt; False 4. Example: Converting Number Bases \[ 233_{10}=11101001_{2} \] Why stack？ Divide by Base algorithm 1545635703548 So, Push fisrt, Pop at the end 1234567891011121314151617181920DIGITS = '0123456789abcdef'def convert_to_base(decimal_number, base): remainder_stack = [] while decimal_number &gt; 0: remainder = decimal_number % base remainder_stack.append(remainder) decimal_number = decimal_number // base new_digits = [] while remainder_stack: new_digits.append(DIGITS[remainder_stack.pop()]) return ''.join(new_digits)convert_to_base(25, 2) # =&gt; '11001'convert_to_base(25, 16) # =&gt; '19' 5. Example: Infix, Prefix and Postfix Expressions Infix expression Prefix expression Postfix expression A + B + A B A B + A + B * C + A * B C A B C * + Infix expression need parenthese to force the performance of addition before multiplication. Prefix &amp; Postfixexpression DON'T need it How to convert infix to prefix or postfix? Fully parenthesize the expression using the order of operations. Then move the enclosed operator to the position of either the left or the right parenthesis depending on whether you want prefix or postfix notation. 1545666927489 5.1 Algorithm Create an empty stack called operation_stack for keeping operators. Create an empty list for output. Convert the input infix string to a list by using the string method split. Scan the token list from left to right. If the token is an operand, append it to the end of the output list. If the token is a left parenthesis, push it on the operation_stack. If the token is a right parenthesis, pop the operation_stack until the corresponding left parenthesis is removed. Append each operator to the end of the output list. If the token is an operator, *, /, +, or -, push it on the operation_stack. However, first remove any operators already on the operation_stack that have higher or equal precedence and append them to the output list. When the input expression has been completely processed, check the operation_stack. Any operators still on the stack can be removed and appended to the end of the output list. 5.2 Implementation 123456789101112131415161718192021222324252627282930313233343536373839404142434445PRECEDENCE = &#123; '*': 3, '/': 3, '+': 2, '-': 2, '(': 1&#125;CHARACTERS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'DIGITS = '0123456789'LEFT_PAREN = '('RIGHT_PAREN = ')'def infix_to_postfix(infix_expression): operation_stack = [] postfix = [] tokens = infix_expression.split() for token in tokens: if token in CHARACTERS or token in DIGITS: postfix.append(token) elif token == LEFT_PAREN: operation_stack.append(token) elif token == RIGHT_PAREN: top_token = operation_stack.pop() while top_token != LEFT_PAREN: postfix.append(top_token) top_token = operation_stack.pop() else: while operation_stack and \ (PRECEDENCE[operation_stack[-1]] &gt;= PRECEDENCE[token]): postfix.append(operation_stack.pop()) operation_stack.append(token) while operation_stack: postfix.append(operation_stack.pop()) return ' '.join(postfix)infix_to_postfix('A * B + C * D') # =&gt; 'A B * C D * +'infix_to_postfix('( A + B ) * C - ( D - E ) * ( F + G )')# =&gt; 'A B + C * D E - F G + * -'infix_to_postfix('( A + B ) * ( C + D )') # =&gt; 'A B + C D + *'infix_to_postfix('( A + B ) * C') # =&gt; 'A B + C *'infix_to_postfix('A + B * C') # =&gt; 'A B C * +']]></content>
      <categories>
        <category>CS</category>
        <category>DS &amp; Algorithm</category>
      </categories>
      <tags>
        <tag>DS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F12%2F18%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick Start Create a new post 1$ hexo new "My New Post" More info: Writing Run server 1$ hexo server More info: Server Generate static files 1$ hexo generate More info: Generating Deploy to remote sites 1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
